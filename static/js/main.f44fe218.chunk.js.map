{"version":3,"sources":["Workouts.tsx","Routine.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["columns","name","selector","sortable","format","row","targets","map","v","Badge","pill","variant","variants","join","wrap","style","textAlign","TextFilter","setFilter","InputGroup","FormControl","placeholder","onChange","target","f","text","value","Workouts","workouts","useState","filter","data","w","some","t","toLowerCase","includes","title","keyField","striped","subHeader","subHeaderComponent","pickRandomly","xs","rng","Math","random","reduce","acc","r","Entry","rounds","n","ListGroup","Item","useRounds","createPersistedState","useSeed","Routine","setRounds","seedrandom","int32","seed","setSeed","toString","entries","input","j","x","o","i","length","floor","shuffle","equipment","slice","max","flatMap","props","Container","Row","Col","md","Prepend","Text","defaultValue","type","htmlSize","Number","parseInt","Append","Button","onClick","isNaN","as","Home","className","href","icon","faGithub","useWorkouts","Tabbed","history","useHistory","location","pathname","key","setKey","defaultWorkouts","setWorkouts","useEffect","push","listen","Tabs","activeKey","onSelect","k","Tab","eventKey","App","basename","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f44fe218.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Badge, InputGroup, FormControl } from \"react-bootstrap\";\nimport DataTable from \"react-data-table-component\";\n\ntype Target = \"core\" | \"arms\" | \"legs\";\n\nexport type Workout = {\n  name: string;\n  targets: Target[];\n  variants?: string[];\n  equipment?: string;\n};\n\nconst columns = [\n  { name: \"Workout\", selector: \"name\", sortable: true },\n  {\n    name: \"Targets\",\n    selector: \"targets\",\n    format: (row: Workout) =>\n      row.targets.map((v) => (\n        <Badge key={v} pill variant=\"info\">\n          {v}\n        </Badge>\n      )),\n  },\n  {\n    name: \"Variants\",\n    selector: \"variants\",\n    format: (row: Workout) => row.variants?.join(\", \"),\n    wrap: true,\n    style: { textAlign: \"left\" } as const,\n  },\n  { name: \"Equipment\", selector: \"equipment\" },\n];\n\ntype Filter = { text?: string };\n\ntype StateSetter<T> = React.Dispatch<React.SetStateAction<T>>;\n\ntype FilterProps = { setFilter: StateSetter<Filter> };\n\nconst TextFilter = ({ setFilter }: FilterProps) => (\n  <InputGroup>\n    <FormControl\n      placeholder=\"All\"\n      onChange={({ target }) =>\n        setFilter((f: Filter) => ({ ...f, text: target.value }))\n      }\n    />\n  </InputGroup>\n);\n\ntype WorkoutsProps = {\n  workouts: Workout[];\n  setWorkouts: StateSetter<Workout[]>;\n};\n\nconst Workouts = ({ workouts }: WorkoutsProps) => {\n  const [filter, setFilter] = useState<Filter>({});\n\n  const data = workouts.filter(\n    (w) =>\n      !filter.text ||\n      [w.name, ...w.targets, ...(w.variants ?? [])].some((t) =>\n        t.toLowerCase().includes(filter?.text?.toLowerCase() ?? \"\")\n      )\n  );\n\n  return (\n    <DataTable\n      title=\"Workouts\"\n      columns={columns}\n      data={data}\n      keyField=\"name\"\n      striped\n      subHeader\n      subHeaderComponent={<TextFilter {...{ setFilter }} />}\n    />\n  );\n};\n\nexport { Workouts };\n","import React from \"react\";\nimport {\n  Button,\n  Col,\n  Row,\n  Container,\n  Badge,\n  ListGroup,\n  InputGroup,\n  FormControl,\n} from \"react-bootstrap\";\nimport seedrandom from \"seedrandom\";\nimport createPersistedState from \"use-persisted-state\";\n\nimport { Workout } from \"./Workouts\";\n\ntype EntryProps = {\n  rounds: number;\n  n: number;\n  name: string;\n  variants?: string[];\n  rng?: () => number;\n};\n\nconst pickRandomly = <T,>(xs: T[], rng = Math.random): T | null =>\n  xs.reduce(\n    ({ acc, w }: { acc: number; w: T | null }, v) => {\n      const r = rng();\n      return r > acc ? { acc: r, w: v } : { acc, w };\n    },\n    { acc: 0, w: null }\n  ).w;\n\nconst Entry = ({ rounds, n, name, variants, rng }: EntryProps) => (\n  <ListGroup.Item>\n    <Badge variant=\"primary\">{n}</Badge> {name}\n    {variants ? ` (${pickRandomly(variants, rng)}) ` : \" \"}\n    <Badge variant=\"light\">Ã—{n * (rounds + 1 - n)}</Badge>\n  </ListGroup.Item>\n);\n\nconst shuffle = <T,>(input: T[], rng = Math.random) => {\n  const o = [...input];\n  for (\n    var j, x, i = o.length;\n    i;\n    j = Math.floor(rng() * i), x = o[--i], o[i] = o[j], o[j] = x\n  );\n  return o;\n};\n\nexport type RoutineProps = { workouts: Workout[] };\n\nconst defaultRounds = 12;\nconst useRounds = createPersistedState(\"rounds-0\");\nconst useSeed = createPersistedState(\"seed-0\");\n\nconst Routine = ({ workouts }: RoutineProps) => {\n  const [rounds, setRounds] = useRounds<number>(defaultRounds);\n  const [seed, setSeed] = useSeed<number>(seedrandom().int32());\n\n  const rng = seedrandom(seed.toString());\n  const viable = workouts.filter((w) => !w.equipment);\n  const entries = shuffle(viable, rng)\n    .slice(0, Math.max(rounds - 1, 0))\n    .flatMap((x, n) => (n === 0 ? [{ name: \"Plank\" }, x] : x))\n    .map((props, n) => (\n      <Entry\n        key={`${n}-${props.name}}}`}\n        n={n + 1}\n        {...{ ...props, rounds, rng }}\n      />\n    ));\n\n  return (\n    <Container>\n      <header>\n        <Row>\n          <Col>\n            <h1>Routine</h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col md=\"auto\">Total {0.5 * rounds * (rounds + 1)}</Col>\n          <Col md=\"auto\">\n            <InputGroup>\n              <InputGroup.Prepend>\n                <InputGroup.Text>#</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                defaultValue={rounds}\n                placeholder={defaultRounds.toString()}\n                type=\"number\"\n                htmlSize={2}\n                onChange={({ target }) =>\n                  setRounds(Number.parseInt(target?.value) || defaultRounds)\n                }\n              />\n              <InputGroup.Append>\n                <Button\n                  variant=\"outline-primary\"\n                  onClick={() => setRounds(defaultRounds)}\n                >\n                  Reset\n                </Button>\n              </InputGroup.Append>\n            </InputGroup>\n          </Col>\n          <Col md=\"auto\">\n            <InputGroup>\n              <InputGroup.Prepend>\n                <InputGroup.Text>Seed</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                value={seed?.toString() ?? \"\"}\n                type=\"number\"\n                htmlSize={10}\n                onChange={({ target }) => {\n                  const i = Number.parseInt(target?.value);\n                  isNaN(i) ? setSeed(rng.int32()) : setSeed(i);\n                }}\n              />\n              <InputGroup.Append>\n                <Button\n                  variant=\"outline-primary\"\n                  onClick={() => setSeed(rng.int32())}\n                >\n                  Randomize\n                </Button>\n              </InputGroup.Append>\n            </InputGroup>\n          </Col>\n        </Row>\n      </header>\n      <Row>\n        <Col>\n          <ListGroup as=\"ol\">{entries}</ListGroup>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport { Routine };\n","import React, { useState, useEffect } from \"react\";\nimport { Button, Tabs, Tab } from \"react-bootstrap\";\nimport { BrowserRouter as Router, useHistory } from \"react-router-dom\";\nimport createPersistedState from \"use-persisted-state\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\n\nimport \"./App.css\";\n\nimport { Workouts, Workout } from \"./Workouts\";\nimport { Routine } from \"./Routine\";\n\nimport defaultWorkouts from \"./workouts.json\";\n\nconst Home = () => (\n  <header className=\"App-header\">\n    <h1>Mi Yodea</h1>\n    <h2>\n      <i>a.k.a.</i> 12 Days of Christmas workout\n    </h2>\n    <p>Who knows one?</p>\n    <Button variant=\"secondary\" href=\"https://github.com/dbaynard/miyodea\">\n      <FontAwesomeIcon icon={faGithub} />\n    </Button>\n  </header>\n);\n\nconst useWorkouts = createPersistedState(\"workouts-0\");\n\nconst Tabbed = () => {\n  const history = useHistory();\n  const [key, setKey] = useState<string>(history.location.pathname);\n  const [workouts, setWorkouts] = useWorkouts(defaultWorkouts as Workout[]);\n\n  useEffect(() => {\n    if (history.location.pathname !== key) history.push(key);\n  }, [history, key]);\n\n  useEffect(() => history.listen((location) => setKey(location.pathname)), [\n    history,\n  ]);\n\n  return (\n    <Tabs activeKey={key} onSelect={(k) => setKey(k ?? \"/\")}>\n      <Tab eventKey=\"/\" title=\"Home\">\n        <Home />\n      </Tab>\n      <Tab eventKey=\"/routine\" title=\"Routine\">\n        <Routine {...{ workouts }} />\n      </Tab>\n      <Tab eventKey=\"/workouts\" title=\"Workouts\">\n        <Workouts {...{ workouts, setWorkouts }} />\n      </Tab>\n    </Tabs>\n  );\n};\n\nconst App = () => (\n  <div className=\"App\">\n    <Router basename={`${process.env.NODE_ENV === \"test\" ? \"\" : \"/miyodea\"}`}>\n      <Tabbed />\n    </Router>\n  </div>\n);\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}